}
ghg_vs_product(simple_df_ghg)
water_usage <- function(){
plot <- plot_ly(simple_df, x = ~Freshwater.Withdrawals,
y = ~Product, type = 'bar',
name = 'water Usage')
return(plot)
}
source("analysis.R")
source("data_wrangling.R")
source("data_wrangling.R")
runApp()
source("data_wrangling.R")
source("data_wrangling.R")
runApp()
plot <- plot_ly(simple_df, x = ~Freshwater.Withdrawals,
y = ~Product, type = 'bar',
name = 'water Usage')
plot <- plot_ly(simple_df, x = ~Freshwater.Withdrawals,
y = ~Product, type = 'bar',
name = 'water Usage')
plot
shinyServer(my_server)
source("data_wrangling.R")
my_server <- function(input, output){
output$plot1 <- renderPlot({
plot <- plot_ly(simple_df, x = ~Freshwater.Withdrawals,
y = ~Product, type = 'bar',
name = 'water Usage')
})
}
shinyServer(my_server)
library("shiny")          # in each relevant script
library("DT")
source("data_wrangling.R")
source("analysis.R")
# Define content for the First page
# First page allows the user to select different meals, and we
# present a datatable on the emissions of each meal and where the emissions
# come from
page_one <- tabPanel(
h1("Greenhouse Gas Emissions By Food. What's your carbon footprint?"),
h4("As greenhouse gas emissions are on the rise and global temperatures with it,
consumers are more and more likely to make decisions based on their carbon footprint.
Food production and agriculture contributes to a large share of these emissions,
so it . We have borrowed this data from Stephen Clune et al to present an app
in which consumers can make informed decisions about their diet.")
)
page_two <- tabPanel(
"Emissions by Food",
titlePanel("Emissions by Food"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "select",
label = h3("Meal Choice"),
choices = list("Hamburger", "burger")
)
),
mainPanel(
imageOutput("image"), # picture of meal
dataTableOutput("table") # datatable of meal
)
)
)
#Define content for the Second page
page_three <- tabPanel(
"Graphical Representations", # label for the tab in the navbar
titlePanel("Graphical Representations"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "select3",
label = h3("Graph Choice"),
choices = list("GHG vs Product")
)
),
mainPanel(
plotOutput("plot") # plot
)
)
)
#Define content for the third page
page_four <- tabPanel(
"Third Page", # label for the tab in the navbar
plotOutput("plot1")
)
my_ui <- navbarPage(
"My Application",
page_one,
page_two,
page_three,
page_four
)
my_server <- function(input, output, session) {
# Send a pre-rendered image, and don't delete the image after sending it
output$image <- renderImage({
#width  <- session$clientData$output_myImage_width
#height <- session$clientData$output_myImage_height
filename <- paste0("images/", tolower(input$select), ".png") # sets filename to send
# Note filename is dependent on what user
# selects
list(src = filename,
contentType = "image/png",
width = 400,
height = 300)
}, deleteFile = FALSE)
output$table = renderDataTable({
if(input$select == "Hamburger") {
hamburger
} else if (input$select == "burger") {
hamburger
}
})
output$plot = renderPlot({
if(input$select3 == "GHG vs Product") {
ghg_vs_product(simple_df_ghg)
}
})
}
shinyApp(ui = my_ui, server = my_server)
library("shiny")
runApp()
shinyUI(my_ui)
shinyUI(my_ui)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
source("data_wrangling.R")
# Define content for the First page
# First page allows the user to select different meals, and we
# present a datatable on the emissions of each meal and where the emissions
# come from
source("data_wrangling.R")
source("analysis.R")
intro <- tabPanel(
h1("Greenhouse Gas Emissions By Food... What's your ''food'' print?"),
h4("As greenhouse gas emissions are on the rise and global temperatures with it,
consumers are more and more likely to make decisions based on their carbon footprint.
Food production and agriculture contributes to a large share of these emissions,
so it . We have borrowed this data from Stephen Clune et al to present an app
in which consumers can make informed decisions about their diet.")
)
emissions_by_meal <- tabPanel(
"Emissions by Meal",
titlePanel("Emissions by Meal"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "meal_select",
label = h3("Meal Choice"),
choices = list("Hamburger")
),
imageOutput("meal_image"), # picture of meal
),
mainPanel(
h3(textOutput("meal_ghg_text")), #outputs the sum of ghg emissions
dataTableOutput("meal_table") # datatable of meal
)
)
)
#Define content for the Second page
graphs <- tabPanel(
"Graphical Representations", # label for the tab in the navbar
titlePanel("Graphical Representations"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "graph_select",
label = h3("Graph Choice"),
choices = list("GHG vs Product")
)
),
mainPanel(
plotOutput("plot") # plot
)
)
)
#Define content for the third page
water_usage <- tabPanel(
"Water Usage",
mainPanel(
plotlyOutput("plot1")
)
)
# Define the fourth page
recipe_input <- tabPanel(
"Input your recipe",
mainPanel(
one_ingredient
),
sidebarPanel(
textOutput("user_ghg"),
actionButton("add", "Add Ingredient")
)
)
one_ingredient <-fluidRow(
id = "ingred",
column(6,
selectInput(
inputId = "ingredient",
label = h3("Ingredient Choice"),
choices = sort(user_df$Product)
)
),
column(6,
numericInput(
inputId = "weight",
label = h3("Amount (kg)"),
value = NA
)
)
)
my_ui <- navbarPage(
"Greenhouse Emissions by Food",
intro,
emissions_by_meal,
graphs,
water_usage,
recipe_input
)
source("data_wrangling.R")
source("analysis.R")
library("dplyr")
my_server <- function(input, output, session) {
#----------Server for first page, meal output-----------------------------
# Send a pre-rendered image, and don't delete the image after sending it
output$meal_image <- renderImage({
filename <- paste0("images/", tolower(input$meal_select), ".png") # sets filename to send
# Note filename is dependent on what user selects
list(src = filename,
contentType = "image/png",
width = 220,
height = 170)
}, deleteFile = FALSE)
output$meal_table = renderDataTable({
tot_weight <- paste0(input$meal_select, ".Total")
tot_emissions <- paste0(input$meal_select, ".Emissions")
df <- by_food[, c("Product", "Product.Emissions", tot_weight, "GHG.Emissions")]
df <- df %>% filter(!is.na(GHG.Emissions))
DT::datatable(df, options = list(paging = FALSE))
})
output$meal_ghg_text = renderText({
tot_weight <- paste0(input$meal_select, ".Total")
tot_emissions <- paste0("GHG", ".Emissions")
df <- by_food[tot_emissions]
df <- na.omit(df)
ghg_tot = round(sum(df[tot_emissions]), 1)
message_str <- paste(ghg_tot, "kg CO2 Equivalents")
message_str
})
#----Server for plot outputs------------------------------------------
output$plot = renderPlot({
if(input$graph_select == "GHG vs Product") { # dont do this... if choice is select
ghg_vs_product(simple_df_ghg)
}
})
output$plot1 <- renderPlotly({
water_usage
})
#------Server for user input meal----------------------------------------
observeEvent(input$add, {
insertUI(
selector = "#ingred",
where = "afterEnd",
ui = one_ingredient
)
})
output$user_ghg = renderText({
emission <- user_df[user_df$Product == input$ingredient, "GHG.Emissions" ]
weight <- input$weight
a <-append(a, emission*weight)
user_tot_emissions <- sum(a)
str <- paste(user_tot_emissions, "kg CO2")
})
}
# Analysis of GHG emissions by meal
library(dplyr)
simple_df <- read.csv("./data/simple_ghg_food.csv")
global_df <- read.csv("./data/GHG_Foods_Global.csv")
by_food <- read.csv("./data/recipe_calculations.csv")
#----Works with larger df to simplify to ghg emissions by product----------------
global_df$Food.type = trimws(global_df$Food.type)
global_df$Food.type[global_df$Food.type == 'Ling Common'] <- 'Ling'
global_df_ghg <- global_df %>%
rename(Product = Food.type) %>%
group_by(Product) %>%
summarize(
GHG.Emissions = sum(as.numeric(kg.CO2.eq.kg.produce..BFM.or.L.after.conversion), na.rm = TRUE) / n()
) %>%
arrange(-GHG.Emissions)
#write.csv(global_df_ghg)
#-----
global_df <- tail(global_df, -1)
simple_df_ghg <- simple_df %>%  # simplifies df to just ghg emissions
select(Product, GHG.Emissions) %>%
arrange(-GHG.Emissions)
hamburger <- by_food %>% # creates a dataframe for hamburger
select(Product, Product.Emissions, Hamburger.Meat,
Hamburger.Veggies, Hamburger.Bun, Hamburger.Total, GHG.Emissions) %>%
filter(!is.na(GHG.Emissions))
#----Creates DF for user-input manipulation----------------
user_df <- global_df_ghg %>%
mutate(
Weight = NA,
Product.Emissions = NA
)
k <- seq(1, 999)
a <- list()
runApp()
shiny::runApp('~/Documents/GitHub/a7--bphan23')
app_ui <- navbarPage("Shiny App",
# Tab name for page 1
tabPanel( "About Page",
h2("Overview:"),
h4(""),
h2("Affliation:"),
h4("Bryan Phan, INFO-201A: Technical Foundations
of Informatics, The Information School,
University of Washington, Autumn 2019"),
h2("Reflection Statement:"),
h4(""),
sidebarLayout(
sidebarPanel(
selectInput("race", "Percent of Race:",
choices = c("Percent Black" = "percblack", "Percent White" = "percwhite",
"Percent Asian" = "percasian", "Percent Other" = "percother")  ),
hr(),
)
)
),
# Tab name for page 2
tabPanel("State representatives query page",
# Title on page 2
titlePanel("Congressional Member Information"),
sidebarLayout(
sidebarPanel(
selectInput("race2", "Percent of Race:",
choices = c("Percent Black" = "percblack", "Percent White" = "percwhite",
"Percent Asian" = "percasian", "Percent Other" = "percother")  ),
hr(),
helpText("Data from the Midwest dataset")
),
mainPanel(
plotOutput("black_educ_plot")
)
)
),
# Tab name for page 3
tabPanel("Summary Page",
# Title on page 3
titlePanel("Summary Page"),
sidebarLayout(
sidebarPanel(
selectInput("race2", "Percent of Race:",
choices = c("Percent Black" = "percblack", "Percent White" = "percwhite",
"Percent Asian" = "percasian", "Percent Other" = "percother")  ),
hr(),
helpText("Data from the Midwest dataset")
),
mainPanel(
plotOutput("black_educ_plot")
)
)
)
)
app_ui <- navbarPage("Shiny App",
# Tab name for page 1
tabPanel( "About Page",
h2("Overview:"),
h4(""),
h2("Affliation:"),
h4("Bryan Phan, INFO-201A: Technical Foundations
of Informatics, The Information School,
University of Washington, Autumn 2019"),
h2("Reflection Statement:"),
h4(""),
sidebarLayout(
sidebarPanel(
selectInput("race", "Percent of Race:",
choices = c("Percent Black" = "percblack", "Percent White" = "percwhite",
"Percent Asian" = "percasian", "Percent Other" = "percother")  ),
hr(),
)
)
),
# Tab name for page 2
tabPanel("State representatives query page",
# Title on page 2
titlePanel("Congressional Member Information"),
sidebarLayout(
sidebarPanel(
selectInput("race2", "Percent of Race:",
choices = c("Percent Black" = "percblack", "Percent White" = "percwhite",
"Percent Asian" = "percasian", "Percent Other" = "percother")  ),
hr(),
helpText("Data from the Midwest dataset")
),
mainPanel(
plotOutput("black_educ_plot")
)
)
),
# Tab name for page 3
tabPanel("Summary Page",
# Title on page 3
titlePanel("Summary Page"),
sidebarLayout(
sidebarPanel(
selectInput("race2", "Percent of Race:",
choices = c("Percent Black" = "percblack", "Percent White" = "percwhite",
"Percent Asian" = "percasian", "Percent Other" = "percother")  ),
hr(),
helpText("Data from the Midwest dataset")
),
mainPanel(
plotOutput("black_educ_plot")
)
)
)
runApp('~/Documents/GitHub/a7--bphan23')
test1 <- rep_by_state("WA")
View(test1)
test3 <- rep_by_state("AZ")
View(test3)
View(test3)
View(test1)
View(data$results)
data$results
return(dataB$results)
dataB
# https://api.propublica.org/congress/v1/members/house/{state}/current.json
rep_by_state <- function(state) {
base_url <- "https://api.propublica.org/congress/v1/members/house/"
end_point <- paste0(base_url, state, "/current.json")
response <- GET(end_point, add_headers("X-API-Key" = propublicakey))
content <- content(response, "text")
dataB <- fromJSON(content)
return(dataB$results)
}
dataA <- fromJSON(content)
View(state.name)
end_point <- paste0(base_url, state.name, "/current.json")
response <- GET(end_point, add_headers("X-API-Key" = propublicakey))
test3 <- rep_all_state()
View(simple_df_ghg)
View(simple_df_ghg)
View(state.abb)
# https://api.propublica.org/congress/v1/members/house/{state}/current.json
rep_by_state <- function(state) {
base_url <- "https://api.propublica.org/congress/v1/members/house/"
end_point <- paste0(base_url, state, "/current.json")
response <- GET(end_point, add_headers("X-API-Key" = propublicakey))
content <- content(response, "text")
dataB <- fromJSON(content)
return(dataB$results)
}
test1 <- rep_by_state("WA")
test3 <- rep_all_state()
#test2 <- rep_by_state("https://api.propublica.org/congress/v1/116/members.json")
rep_all_state <- function() {
base_url <- "https://api.propublica.org/congress/v1/members/house/"
end_point <- paste0(base_url, state.abb, "/current.json")
response <- GET(end_point, add_headers("X-API-Key" = propublicakey))
content <- content(response, "text")
dataA <- fromJSON(content)
return(dataA$results)
View(test3)
>
View(test3)
# install.packages('httr')
# install.packages('jsonlite')
library('httr')
library('jsonlite')
library('dplyr')
source("api_key.R")
# https://api.propublica.org/congress/v1/members/house/{state}/current.json
rep_by_state <- function(state) {
base_url <- "https://api.propublica.org/congress/v1/members/house/"
end_point <- paste0(base_url, state, "/current.json")
response <- GET(end_point, add_headers("X-API-Key" = propublicakey))
content <- content(response, "text")
dataB <- fromJSON(content)
return(dataB$results)
}
test1 <- rep_by_state("WA")
test4 <- rep_all_state()
#test2 <- rep_by_state("https://api.propublica.org/congress/v1/116/members.json")
rep_all_state <- function() {
base_url <- "https://api.propublica.org/congress/v1/members/house/"
end_point <- paste0(base_url, state.abb, "/current.json")
response <- GET(end_point, add_headers("X-API-Key" = propublicakey))
content <- content(response, "text")
dataA <- fromJSON(content)
return(dataA$results)
test4 <- rep_all_state("state.abb")
#test2 <- rep_by_state("https://api.propubl
View(test1)
View(simple_df_ghg)
test4 <- rep_all_state(state.abb)
rep_all_state <- function(state) {
base_url <- "https://api.propublica.org/congress/v1/members/house/"
end_point <- paste0(base_url, state, "/current.json")
response <- GET(end_point, add_headers("X-API-Key" = propublicakey))
content <- content(response, "text")
dataA <- fromJSON(content)
return(dataA$results)
}
