dat <- read.table('hw_lect3_dat.txt')
data("morley")
names("morley")
data("morley")
?morley
data(morley)
?morley
dim(morley)
x <- morley[, 3]
?x
??x
?morley[, 3]
mean(x)
?morley
#Part c
??morley
#Part c
morley
#Part d
x <- morley[, 3]
mean(x)
#Part f
y <- x[1:20,]
#Part f
y <- morley[1:20,]
y
mean(y[, 3])
#Part g
par(mfrow = c(3,3))
hist(x, breaks 20)
hist(x, breaks = 20)
#Part g
abline(v=792.458, col=2)
first_score <- 100
second_score <- 200
average_score <- (first_score + second_score) / 2
first_score <- 90
average_score
average_score <- (first_score + second_score) / 2
sum(dbinom(0: , 4, .25))
sum(dbinom(0, 4, .25))
dbinom(0, 4, .25)
dbinom(0:100, 4, .25)
dbinom(0:4, 4, .25)
n.trials <- 1000
n <- 1:100
sample.mean <- numeric(100)
sample.var <- numeric(100)
for (i in n) {
head.counts <- rbinom(n.trials, i, .25)
sample.mean[i] <- mean(head.counts)
sample.var[i] <- var(head.counts)
}
sample.mean
ppois(15, lamda=5)
ppois(15, lambda=5)
ppois(1rpois(n, lambda = 5)
rpois(n, lambda = 5)
qpois(, lambda = 5, lower.tail = true)
qpois(lambda = 5, lower.tail = true)
qpois(p, lambda = 5, lower.tail = true)
qpois(5, lambda = 5, lower.tail = true)
qpois(5, lambda = 5, lower.tail = FALSE)
qpois(5, lambda = 5, lower.tail = TRUE)
qpois(1, lambda = 5, lower.tail = TRUE)
qpois(1, lambda = 5, lower.tail = FALSE)
pbinom(size=20, prob=.25)
pbinom(0, size=20, prob=.25)
qpois(0, lambda = 5, lower.tail = FALSE)
pbinom(20.25, size=20, prob=.25)
pbinom(19.75, size=20, prob=.25)
pnorm(5, mean=5, sd=1)
rownames(Florida$Total[Florida$Total == max(Florida$Total),])
install.packages(carData)
install.packages("carData")
rownames(Florida$Total[Florida$Total == max(Florida$Total),])
Florida
carData.Florida
data(carData)
data(Florida)
carData::Florida
rownames(Florida$Total[Florida$Total == max(Florida$Total),])
data <- carData::Florida
rownames(Florida$Total[Florida$Total == max(Florida$Total),])
Florida <- carData::Florida
rownames(Florida$Total[Florida$Total == max(Florida$Total),])
rownames(Florida[Florida$Total == min(Florida$Total),])
rownames(Florida[Florida$Total = max(Florida$Total),])
carData::Florida
Florida <- carData::Florida
rownames(Florida[Florida$Total == max(Florida$Total),])
MoreGore <- Florida("GORE") > Florida("Bush")
MoreGore <- $("GORE") > $("Bush")
MoreGore <- Florida$("GORE") > Florida$("Bush")
MoreGore <- Florida$GORE > Florida$BUSH
print(MoreGore)
print(Florida[MoreGore])
MoreGore <- Florida$GORE > Florida$BUSH
print(Florida[MoreGore])
print(Florida$BUCHANAN[MoreGore])
print(sum(Florida$BUCHANAN[MoreGore]))
print(sum(Florida$BUCHANAN[Florida$GORE > Florida$BUSH]))
nrow(Florida[,Florida$GORE > Florida$BUSH])
nrow(Florida[,Florida$GORE > Florida$BUSH])
Florida <- carData::Florida
nrow(Florida[,Florida$GORE > Florida$BUSH])
Florida[Florida$GORE > Florida$BUSH,]
nrow(Florida[Florida$GORE > Florida$BUSH,])
# a)
pop.mean = 1
pop.sigma = 2
sample.size = 100
set.seed(1)
n.trial = 10000
sample.stat = numeric(n.trial)
UCB = numeric(n.trial)
for (i in 1:n.trial) {
samp.trial = rnorm(sample.size, pop.mean, pop.sigma)
sample.stat[i] =
UCB[i] =
}
qnorm(.05)
# a)
pop.mean = 1
pop.sigma = 2
sample.size = 100
set.seed(1)
n.trial = 10000
sample.stat = numeric(n.trial)
UCB = numeric(n.trial)
for (i in 1:n.trial) {
samp.trial = rnorm(sample.size, pop.mean, pop.sigma)
sample.stat[i] = mean(samp.trial)
UCB[i] = sample.stat[i] + abs(qnorm(.05)) * (sd(sample.trial) / sqrt(sample.size))
}
set.seed(1)
n.trial = 10000
sample.stat = numeric(n.trial)
UCB = numeric(n.trial)
for (i in 1:n.trial) {
samp.trial = rnorm(sample.size, pop.mean, pop.sigma)
sample.stat[i] = mean(samp.trial)
UCB[i] = sample.stat[i] + abs(qnorm(.05)) * (sd(samp.trial) / sqrt(sample.size))
}
count = 0
for(i in 1:n.trial){
if(USB > pop.mean)
count = count + 1
}
count/n.trial                #converge = ??
count = 0
for(i in 1:n.trial){
if(USB[i] > pop.mean)
count = count + 1
}
count = 0
for(i in 1:n.trial){
if(UCB[i] > pop.mean)
count = count + 1
}
count/n.trial                #converge = ??
UCB
set.seed(1)
n.trial = 10000
samp.med = numeric(n.trial)
for (i in 1:n.trial) {
samp.trial = rnorm(sample.size, pop.mean, pop.sigma)
sample.stat[i] = median(samp.trial)
}
samp.med
for (i in 1:n.trial) {
samp.trial = rnorm(sample.size, pop.mean, pop.sigma)
sample.med[i] = median(samp.trial)
}
set.seed(1)
n.trial = 10000
samp.med = numeric(n.trial)
for (i in 1:n.trial) {
samp.trial = rnorm(sample.size, pop.mean, pop.sigma)
sample.med[i] = median(samp.trial)
}
for (i in 1:n.trial) {
samp.trial = rnorm(sample.size, pop.mean, pop.sigma)
samp.med[i] = median(samp.trial)
}
samp.med
hist(samp.med, breaks = 400)
pop <- rnorm(sample.size, pop.mean, pop.sigma)
# b) Build samp dist of samp med
pop.mean = 1
pop.sigma = 2
sample.size = 100
set.seed(1)
n.trial = 10000
pop <- rnorm(sample.size, pop.mean, pop.sigma)
samp.med = numeric(n.trial)
for (i in 1:n.trial) {
samp <- sample(pop, sample.size, replace = T)
samp.med[i] = median(samp)
}
hist(samp.med, breaks = 400)
hist(samp.med, breaks = 40)
hist(samp.med, breaks = 50)
for (i in 1:n.trial) {
samp <- sample(pop, sample.size, replace = T)
samp.med[i] = median(samp)
}
hist(samp.med, breaks = 50)
for (i in 1:n.trial) {
samp <- sample(pop, sample.size, replace = T)
samp.med[i] = median(samp)
}
hist(samp.med, breaks = 50)
for (i in 1:n.trial) {
samp <- sample(pop, sample.size, replace = T)
samp.med[i] = median(samp)
}
hist(samp.med, breaks = 50)
# c) Make Norm qqplot and superimpose line
qqnorm(samp.med)
hist(samp.med, breaks = 100)
# c) Make Norm qqplot and superimpose line
qqnorm(samp.med)
# b) Build samp dist of samp med
N <- 100000
pop.mean = 1
pop.sigma = 2
sample.size = 100
set.seed(1)
n.trial = 10000
pop <- rnorm(N, pop.mean, pop.sigma)
samp.med = numeric(n.trial)
for (i in 1:n.trial) {
samp <- sample(pop, sample.size, replace = T)
samp.med[i] = median(samp)
}
hist(samp.med, breaks = 100)
# c) Make Norm qqplot and superimpose line
qqnorm(samp.med)
# c) Make Norm qqplot and superimpose line intercpet = pop.mean, slope = sigma_x/sqrt(n)
qqnorm(samp.med)
abline(pop.mean, pop.mean/sqrt(n.trial))
abline(pop.mean, pop.sigma/sqrt(n.trial))
# c) Make Norm qqplot and superimpose line intercpet = pop.mean, slope = sigma_x/sqrt(n)
qqnorm(samp.med)
abline(pop.mean, pop.sigma/sqrt(n.trial))
abline(pop.mean, pop.sigma/sqrt(sample.size))
# b) Build samp dist of samp med
N <- 100000
pop.mean = 1
pop.sigma = 2
sample.size = 100
set.seed(1)
n.trial = 10000
pop <- rnorm(N, pop.mean, pop.sigma)
samp.med = numeric(n.trial)
for (i in 1:n.trial) {
samp <- sample(pop, sample.size, replace = T)
samp.med[i] = median(samp)
}
hist(samp.med, breaks = 100)
# c) Make Norm qqplot and superimpose line intercept = pop.mean, slope = sigma_x/sqrt(n)
qqnorm(samp.med)
abline(pop.mean, pop.sigma/sqrt(sample.size))
abline(pop.mean, pop.sigma/sqrt(n.trials))
# b) Build samp dist of samp med
N <- 100000
pop.mean = 1
pop.sigma = 2
sample.size = 100
set.seed(1)
n.trial = 10000
pop <- rnorm(N, pop.mean, pop.sigma)
samp.med = numeric(n.trial)
for (i in 1:n.trial) {
samp <- sample(pop, sample.size, replace = T)
samp.med[i] = median(samp)
}
hist(samp.med, breaks = 100)
# c) Make Norm qqplot and superimpose line intercept = pop.mean, slope = sigma_x/sqrt(n)
qqnorm(samp.med)
abline(pop.mean, pop.sigma/sqrt(n.trials))
# d) Using Laplace formula
abline(pop.mean, pop.sigma/sqrt(sample.size))
abline(pop.mean, pop.sigma/sqrt(n.trial))
# d) Using Laplace formula
abline(pop.mean, sqrt(pi/2) * pop.sigma/sqrt(n.trial))
# d) Using Laplace formula
abline(pop.mean, sqrt(pi/2) * pop.sigma/sqrt(sample.size))
# b) Build samp dist of samp med
N <- 100000
pop.mean = 1
pop.sigma = 2
sample.size = 100
set.seed(1)
n.trial = 10000
pop <- rnorm(N, pop.mean, pop.sigma)
samp.med = numeric(n.trial)
for (i in 1:n.trial) {
samp <- sample(pop, sample.size, replace = T)
samp.med[i] = median(samp)
}
hist(samp.med, breaks = 100)
# c) Make Norm qqplot and superimpose line intercept = pop.mean, slope = sigma_x/sqrt(n)
qqnorm(samp.med)
abline(pop.mean, pop.sigma/sqrt(sample.size))
# d) Using Laplace formula
abline(pop.mean, sqrt(pi/2) * pop.sigma/sqrt(sample.size))
#e) Revise part a to compute UCB of pop med
pop.mean = 1
pop.sigma = 2
sample.size = 100
set.seed(1)
n.trial = 10000
sample.stat = numeric(n.trial)
UCB = numeric(n.trial)
for (i in 1:n.trial) {
samp.trial = rnorm(sample.size, pop.mean, pop.sigma)
sample.stat[i] = median(samp.trial)
UCB[i] = sample.stat[i] + abs(qnorm(.05)) * (sd(samp.trial) / sqrt(sample.size))
}
count = 0
for(i in 1:n.trial){
if(UCB[i] > pop.median)
count = count + 1
}
count/n.trial                #converge = 95.12
#e) Revise part a to compute UCB of pop med
pop.mean = 1
pop.sigma = 2
sample.size = 100
set.seed(1)
n.trial = 10000
sample.stat = numeric(n.trial)
UCB = numeric(n.trial)
for (i in 1:n.trial) {
samp.trial = rnorm(sample.size, pop.mean, pop.sigma)
sample.stat[i] = median(samp.trial)
UCB[i] = sample.stat[i] + abs(qnorm(.05)) * (sd(samp.trial) / sqrt(sample.size))
}
count = 0
for(i in 1:n.trial){
if(UCB[i] < pop.median)
count = count + 1
}
count/n.trial                #converge = 95.12
for (i in 1:n.trial) {
samp.trial = rnorm(sample.size, pop.mean, pop.sigma)
sample.stat[i] = median(samp.trial)
UCB[i] = sample.stat[i] + abs(qnorm(.05)/2) * (sd(samp.trial) / sqrt(sample.size))
}
count = 0
for(i in 1:n.trial){
if(UCB[i] > pop.median)
count = count + 1
}
pop.median <- 1
sample.size = 100
set.seed(1)
n.trial = 10000
sample.stat = numeric(n.trial)
UCB = numeric(n.trial)
for (i in 1:n.trial) {
samp.trial = rnorm(sample.size, pop.mean, pop.sigma)
sample.stat[i] = median(samp.trial)
UCB[i] = sample.stat[i] + abs(qnorm(.05)/2) * (sd(samp.trial) / sqrt(sample.size))
}
count = 0
for(i in 1:n.trial){
if(UCB[i] > pop.median)
count = count + 1
}
count/n.trial                #converge = 95.12
# f) 95th percentile of dist
t.test(sample.trial, alternative = "one.sided", conf.level = 0.95)
# f) 95th percentile of dist
t.test(UCB, alternative = "one.sided", conf.level = 0.95)
# f) 95th percentile of dist
t.test(UCB, alternative = "less", conf.level = 0.95)
# f) 95th percentile of dist
t.test(UCB, alternative = "greater", conf.level = 0.95)
#
?quartile
#
?quantile
install.packages("shiny") # once per machine
library("shiny")          # in each relevant script
runApp('Desktop/Coding/info_201_AB05')
shiny::runApp()
install.packages("DT")
library("DT")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("~/desktop/info201/info_201_AB05/by_food_analysis.R")
runApp()
source("/laurenng/desktop/info201/info_201_AB05/by_food_analysis.R")
source("/laurenng/desktop/INFO201/info_201_AB05/by_food_analysis.R")
source("/laurenng/desktop/INFO201/info_201_AB05/by_food_analysis.R")
source("laurenng/desktop/INFO201/info_201_AB05/by_food_analysis.R")
source("~/desktop/INFO201/info_201_AB05/by_food_analysis.R")
setwd("~/Desktop/INFO201/info_201_AB05")
source("~/desktop/INFO201/info_201_AB05/by_food_analysis.R")
source("~/desktop/INFO201/info_201_AB05/by_food_analysis.R")
setwd("~/")
runApp('Desktop/INFO201/info_201_AB05')
setwd("~/Desktop/INFO201/info_201_AB05")
source("by_food_analysis.R")
source("/by_food_analysis.R")
source("./by_food_analysis.R")
source("./by_food_analysis.R")
source("by_food_analysis.R")
source("./by_food_analysis.R")
runApp()
runApp()
shiny::runApp()
runApp('~/Desktop/INFO201/info_201_AB05')
runApp('~/Desktop/INFO201/info_201_AB05')
install.packages("leaflet")
runApp('~/Desktop/INFO201/info_201_AB05')
source("./data_wrangling.R")
runApp('~/Desktop/INFO201/info_201_AB05')
shiny::runApp()
