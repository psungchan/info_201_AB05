# b) Build samp dist of samp med
N <- 100000
pop.mean = 1
pop.sigma = 2
sample.size = 100
set.seed(1)
n.trial = 10000
pop <- rnorm(N, pop.mean, pop.sigma)
samp.med = numeric(n.trial)
for (i in 1:n.trial) {
samp <- sample(pop, sample.size, replace = T)
samp.med[i] = median(samp)
}
hist(samp.med, breaks = 100)
# c) Make Norm qqplot and superimpose line
qqnorm(samp.med)
# c) Make Norm qqplot and superimpose line intercpet = pop.mean, slope = sigma_x/sqrt(n)
qqnorm(samp.med)
abline(pop.mean, pop.mean/sqrt(n.trial))
abline(pop.mean, pop.sigma/sqrt(n.trial))
# c) Make Norm qqplot and superimpose line intercpet = pop.mean, slope = sigma_x/sqrt(n)
qqnorm(samp.med)
abline(pop.mean, pop.sigma/sqrt(n.trial))
abline(pop.mean, pop.sigma/sqrt(sample.size))
# b) Build samp dist of samp med
N <- 100000
pop.mean = 1
pop.sigma = 2
sample.size = 100
set.seed(1)
n.trial = 10000
pop <- rnorm(N, pop.mean, pop.sigma)
samp.med = numeric(n.trial)
for (i in 1:n.trial) {
samp <- sample(pop, sample.size, replace = T)
samp.med[i] = median(samp)
}
hist(samp.med, breaks = 100)
# c) Make Norm qqplot and superimpose line intercept = pop.mean, slope = sigma_x/sqrt(n)
qqnorm(samp.med)
abline(pop.mean, pop.sigma/sqrt(sample.size))
abline(pop.mean, pop.sigma/sqrt(n.trials))
# b) Build samp dist of samp med
N <- 100000
pop.mean = 1
pop.sigma = 2
sample.size = 100
set.seed(1)
n.trial = 10000
pop <- rnorm(N, pop.mean, pop.sigma)
samp.med = numeric(n.trial)
for (i in 1:n.trial) {
samp <- sample(pop, sample.size, replace = T)
samp.med[i] = median(samp)
}
hist(samp.med, breaks = 100)
# c) Make Norm qqplot and superimpose line intercept = pop.mean, slope = sigma_x/sqrt(n)
qqnorm(samp.med)
abline(pop.mean, pop.sigma/sqrt(n.trials))
# d) Using Laplace formula
abline(pop.mean, pop.sigma/sqrt(sample.size))
abline(pop.mean, pop.sigma/sqrt(n.trial))
# d) Using Laplace formula
abline(pop.mean, sqrt(pi/2) * pop.sigma/sqrt(n.trial))
# d) Using Laplace formula
abline(pop.mean, sqrt(pi/2) * pop.sigma/sqrt(sample.size))
# b) Build samp dist of samp med
N <- 100000
pop.mean = 1
pop.sigma = 2
sample.size = 100
set.seed(1)
n.trial = 10000
pop <- rnorm(N, pop.mean, pop.sigma)
samp.med = numeric(n.trial)
for (i in 1:n.trial) {
samp <- sample(pop, sample.size, replace = T)
samp.med[i] = median(samp)
}
hist(samp.med, breaks = 100)
# c) Make Norm qqplot and superimpose line intercept = pop.mean, slope = sigma_x/sqrt(n)
qqnorm(samp.med)
abline(pop.mean, pop.sigma/sqrt(sample.size))
# d) Using Laplace formula
abline(pop.mean, sqrt(pi/2) * pop.sigma/sqrt(sample.size))
#e) Revise part a to compute UCB of pop med
pop.mean = 1
pop.sigma = 2
sample.size = 100
set.seed(1)
n.trial = 10000
sample.stat = numeric(n.trial)
UCB = numeric(n.trial)
for (i in 1:n.trial) {
samp.trial = rnorm(sample.size, pop.mean, pop.sigma)
sample.stat[i] = median(samp.trial)
UCB[i] = sample.stat[i] + abs(qnorm(.05)) * (sd(samp.trial) / sqrt(sample.size))
}
count = 0
for(i in 1:n.trial){
if(UCB[i] > pop.median)
count = count + 1
}
count/n.trial                #converge = 95.12
#e) Revise part a to compute UCB of pop med
pop.mean = 1
pop.sigma = 2
sample.size = 100
set.seed(1)
n.trial = 10000
sample.stat = numeric(n.trial)
UCB = numeric(n.trial)
for (i in 1:n.trial) {
samp.trial = rnorm(sample.size, pop.mean, pop.sigma)
sample.stat[i] = median(samp.trial)
UCB[i] = sample.stat[i] + abs(qnorm(.05)) * (sd(samp.trial) / sqrt(sample.size))
}
count = 0
for(i in 1:n.trial){
if(UCB[i] < pop.median)
count = count + 1
}
count/n.trial                #converge = 95.12
for (i in 1:n.trial) {
samp.trial = rnorm(sample.size, pop.mean, pop.sigma)
sample.stat[i] = median(samp.trial)
UCB[i] = sample.stat[i] + abs(qnorm(.05)/2) * (sd(samp.trial) / sqrt(sample.size))
}
count = 0
for(i in 1:n.trial){
if(UCB[i] > pop.median)
count = count + 1
}
pop.median <- 1
sample.size = 100
set.seed(1)
n.trial = 10000
sample.stat = numeric(n.trial)
UCB = numeric(n.trial)
for (i in 1:n.trial) {
samp.trial = rnorm(sample.size, pop.mean, pop.sigma)
sample.stat[i] = median(samp.trial)
UCB[i] = sample.stat[i] + abs(qnorm(.05)/2) * (sd(samp.trial) / sqrt(sample.size))
}
count = 0
for(i in 1:n.trial){
if(UCB[i] > pop.median)
count = count + 1
}
count/n.trial                #converge = 95.12
# f) 95th percentile of dist
t.test(sample.trial, alternative = "one.sided", conf.level = 0.95)
# f) 95th percentile of dist
t.test(UCB, alternative = "one.sided", conf.level = 0.95)
# f) 95th percentile of dist
t.test(UCB, alternative = "less", conf.level = 0.95)
# f) 95th percentile of dist
t.test(UCB, alternative = "greater", conf.level = 0.95)
#
?quartile
#
?quantile
install.packages("shiny") # once per machine
library("shiny")          # in each relevant script
runApp('Desktop/Coding/info_201_AB05')
shiny::runApp()
install.packages("DT")
library("DT")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("~/desktop/info201/info_201_AB05/by_food_analysis.R")
runApp()
source("/laurenng/desktop/info201/info_201_AB05/by_food_analysis.R")
source("/laurenng/desktop/INFO201/info_201_AB05/by_food_analysis.R")
source("/laurenng/desktop/INFO201/info_201_AB05/by_food_analysis.R")
source("laurenng/desktop/INFO201/info_201_AB05/by_food_analysis.R")
source("~/desktop/INFO201/info_201_AB05/by_food_analysis.R")
setwd("~/Desktop/INFO201/info_201_AB05")
source("~/desktop/INFO201/info_201_AB05/by_food_analysis.R")
source("~/desktop/INFO201/info_201_AB05/by_food_analysis.R")
setwd("~/")
runApp('Desktop/INFO201/info_201_AB05')
setwd("~/Desktop/INFO201/info_201_AB05")
source("by_food_analysis.R")
source("/by_food_analysis.R")
source("./by_food_analysis.R")
source("./by_food_analysis.R")
source("by_food_analysis.R")
source("./by_food_analysis.R")
runApp()
runApp()
shiny::runApp()
runApp('~/Desktop/INFO201/info_201_AB05')
runApp('~/Desktop/INFO201/info_201_AB05')
install.packages("leaflet")
runApp('~/Desktop/INFO201/info_201_AB05')
source("./data_wrangling.R")
runApp('~/Desktop/INFO201/info_201_AB05')
shiny::runApp()
shiny::runApp()
water_usage <- function(){
plot <- ggplot(data = simple_df, mapping = aes(x = GHG.Emissions, y = Freshwater.Withdrawals)) +
geom_point(alpha = 0.9) +
ggtitle("Food emissions")
add_markers(
text = ~paste("State: ", product, "<br />",
symbol = I("circle"), hoverinfo = "text",
marker = list(size = ~num_impacted))
)
return(plot)
}
water_usage <- function(){
p <- plot_ly(foods, x = ~Freshwater.Withdrawals,
y = ~Product, type = 'bar',
name = 'water Usage')
return(plot)
}
water_usage <- function(){
#plot_ly() <- plot_ly(simple_df, x = ~Freshwater.Withdrawals,
#            y = ~Product, type = 'bar',
#           name = 'water Usage')
bar <- qplot(
data = simple_df,
geom = "col",
xlab = "Product",
ylab = "GHG Emissions (kg CO2 / FU)"
)
bar <- bar + theme(axis.text.x = element_text(angle = 90, hjust = 1))
return(bar)
}
water_usage <- function(){
plot <- plot_ly(simple_df, x = ~Freshwater.Withdrawals,
y = ~Product, type = 'bar',
name = 'water Usage')
return(plot)
}
runApp('~/Desktop/INFO201/a7--laurenng')
runApp('~/Desktop/INFO201/a7--laurenng')
runApp('~/Desktop/INFO201/a7--laurenng')
runApp('~/Desktop/INFO201/a7--laurenng')
runApp('~/Desktop/INFO201/a7--laurenng')
runApp('~/Desktop/INFO201/a7--laurenng')
runApp('~/Desktop/INFO201/a7--laurenng')
runApp('~/Desktop/INFO201/a7--laurenng')
runApp('~/Desktop/INFO201/a7--laurenng')
runApp('~/Desktop/INFO201/a7--laurenng')
runApp('~/Desktop/INFO201/a7--laurenng')
# https://api.propublica.org/congress/v1/members/house/{state}/current.json
rep_by_state <- function(state) {
base_url <- "https://api.propublica.org/congress/v1/members/house/"
end_point <- paste0(base_url, state, "/current.json")
response <- GET(end_point, add_headers("X-API-Key" = republicakey))
content <- content(response, "test")
data <- fromJSON(content)
return(data)
}
test1 <- rep_by_state("WA")
test1 <- rep_by_state("WA")
library("httr")
library("jsonlite")
library("dplyr")
source("ape-key.R")
source("api-key.R")
setwd("~/Desktop/INFO201/a7--laurenng")
source("api-key.R")
rep_by_state <- function(state) {
end_point <- paste0(base_url, state, "/current.json")
response <- GET(end_point, add_headers("X-API-Key" = republicakey))
content <- content(response, "test")
data <- fromJSON(content)
return(data)
}
test1 <- rep_by_state("WA")
rep_by_state <- function(state) {
base_url <- "https://api.propublica.org/congress/v1/members/house/"
end_point <- paste0(base_url, state, "/current.json")
response <- GET(end_point, add_headers("X-API-Key" = republicakey))
content <- content(response, "test")
data <- fromJSON(content)
return(data)
}
test1 <- rep_by_state("WA")
rep_by_state <- function(state) {
base_url <- "https://api.propublica.org/congress/v1/members/house/"
end_point <- paste0(base_url, state, "/current.json")
response <- GET(end_point, add_headers("X-API-Key" = republicakey))
content <- content(response, "text")
data <- fromJSON(content)
return(data$results)
}
test1 <- rep_by_state("WA")
View(test1)
test1 <- rep_by_state("")
test1 <- rep_by_state("CA")
View(test1)
runApp('~/Desktop/INFO201/info_201_AB05')
runApp('~/Desktop/INFO201/info_201_AB05')
setwd("~/Desktop/INFO201/info_201_AB05")
runApp()
runApp()
setwd("~/Desktop/INFO201/info_201_AB05")
runApp()
library("shiny")
library("DT")
source("./data_wrangling.R")
source("./analysis.R")
runApp()
runApp()
runApp()
runApp()
runApp()
my_ui <- navbarPage(
"My Application",
page_one,
page_two,
page_three
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp('~/Desktop/INFO201/test_one')
runApp()
simple_df <- read.csv("./data/simple_ghg_food.csv")
global_df <- read.csv("./data/GHG_Foods_Global.csv")
by_food <- read.csv("./data/recipe_calculations.csv")
global_df_ghg <- global_df %>% # simplifies to just ghg emissions
group_by(Food.type) %>%
summarize(
GHG.Emissions = sum(as.numeric(kg.CO2.eq.kg.produce..BFM.or.L.after.conversion), na.rm = TRUE) / n()
) %>%
rename(Product = Food.type) %>%
arrange(-GHG.Emissions)
global_df <- tail(global_df, -1)
simple_df_ghg <- simple_df %>%  # simplifies df to just ghg emissions
select(Product, GHG.Emissions) %>%
arrange(-GHG.Emissions)
hamburger <- by_food %>% # creates a dataframe for hamburger
select(Product, Product.Emissions, Hamburger.Meat,
Hamburger.Veggies, Hamburger.Bun, Hamburger.Total, GHG.Emissions) %>%
filter(!is.na(Hamburger.Total))
setwd("~/Desktop/INFO201/info_201_AB05")
runApp()
source("data_wrangling.R")
source("./analysis.R")
source("analysis.R")
setwd("~/Desktop/INFO201/info_201_AB05")
# Analysis and Plots
library(dplyr)
library(plotly)
library(ggplot2)
library(leaflet)
source("./data_wrangling.R")
source("./info_201_AB05/data_wrangling.R")
ghg_vs_product <- function(df) {
bar <- qplot(
reorder(Product, -GHG.Emissions),
GHG.Emissions,
data = df,
geom = "col",
xlab = "Product",
ylab = "GHG Emissions (kg CO2 / FU)"
)
bar <- bar + theme(axis.text.x = element_text(angle = 90, hjust = 1))
return(bar)
}
ghg_vs_product(simple_df_ghg)
water_usage <- function(){
plot <- plot_ly(simple_df, x = ~Freshwater.Withdrawals,
y = ~Product, type = 'bar',
name = 'water Usage')
return(plot)
}
source("analysis.R")
source("data_wrangling.R")
source("data_wrangling.R")
runApp()
source("data_wrangling.R")
source("data_wrangling.R")
runApp()
plot <- plot_ly(simple_df, x = ~Freshwater.Withdrawals,
y = ~Product, type = 'bar',
name = 'water Usage')
plot <- plot_ly(simple_df, x = ~Freshwater.Withdrawals,
y = ~Product, type = 'bar',
name = 'water Usage')
plot
shinyServer(my_server)
source("data_wrangling.R")
my_server <- function(input, output){
output$plot1 <- renderPlot({
plot <- plot_ly(simple_df, x = ~Freshwater.Withdrawals,
y = ~Product, type = 'bar',
name = 'water Usage')
})
}
shinyServer(my_server)
library("shiny")          # in each relevant script
library("DT")
source("data_wrangling.R")
source("analysis.R")
# Define content for the First page
# First page allows the user to select different meals, and we
# present a datatable on the emissions of each meal and where the emissions
# come from
page_one <- tabPanel(
h1("Greenhouse Gas Emissions By Food. What's your carbon footprint?"),
h4("As greenhouse gas emissions are on the rise and global temperatures with it,
consumers are more and more likely to make decisions based on their carbon footprint.
Food production and agriculture contributes to a large share of these emissions,
so it . We have borrowed this data from Stephen Clune et al to present an app
in which consumers can make informed decisions about their diet.")
)
page_two <- tabPanel(
"Emissions by Food",
titlePanel("Emissions by Food"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "select",
label = h3("Meal Choice"),
choices = list("Hamburger", "burger")
)
),
mainPanel(
imageOutput("image"), # picture of meal
dataTableOutput("table") # datatable of meal
)
)
)
#Define content for the Second page
page_three <- tabPanel(
"Graphical Representations", # label for the tab in the navbar
titlePanel("Graphical Representations"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "select3",
label = h3("Graph Choice"),
choices = list("GHG vs Product")
)
),
mainPanel(
plotOutput("plot") # plot
)
)
)
#Define content for the third page
page_four <- tabPanel(
"Third Page", # label for the tab in the navbar
plotOutput("plot1")
)
my_ui <- navbarPage(
"My Application",
page_one,
page_two,
page_three,
page_four
)
my_server <- function(input, output, session) {
# Send a pre-rendered image, and don't delete the image after sending it
output$image <- renderImage({
#width  <- session$clientData$output_myImage_width
#height <- session$clientData$output_myImage_height
filename <- paste0("images/", tolower(input$select), ".png") # sets filename to send
# Note filename is dependent on what user
# selects
list(src = filename,
contentType = "image/png",
width = 400,
height = 300)
}, deleteFile = FALSE)
output$table = renderDataTable({
if(input$select == "Hamburger") {
hamburger
} else if (input$select == "burger") {
hamburger
}
})
output$plot = renderPlot({
if(input$select3 == "GHG vs Product") {
ghg_vs_product(simple_df_ghg)
}
})
}
shinyApp(ui = my_ui, server = my_server)
library("shiny")
runApp()
shinyUI(my_ui)
shinyUI(my_ui)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
